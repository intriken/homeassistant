name: "Synchronize 2 Home Assistant Todo Lists (Improved)"
description: >
  This blueprint synchronizes two to-do lists in Home Assistant bidirectionally.
  It identifies added, removed, and moved items, ensuring accurate and reliable
  synchronization.
domain: automation
input:
  list_1:
    name: List 1
    description: Select your first list to synchronize.
    selector:
      entity:
        domain: todo
  list_2:
    name: List 2
    description: Select your second list to synchronize.
    selector:
      entity:
        domain: todo
trigger:
  - platform: state
    entity_id:
      - !input list_1
  - platform: state
    entity_id:
      - !input list_2
condition: []
action:
  - variables:
      list_1: !input list_1
      list_2: !input list_2
  - service: todo.get_items
    target:
      entity_id: "{{ list_1 }}"
    data:
      status: needs_action
    response_variable: list_1_items
  - service: todo.get_items
    target:
      entity_id: "{{ list_2 }}"
    data:
      status: needs_action
    response_variable: list_2_items

  - variables:
      list_1_items: "{{ list_1_items[list_1]['items'] }}"
      list_2_items: "{{ list_2_items[list_2]['items'] }}"

  # Identify new items in List 1
  - variables:
      new_in_list_1: >
        {% set new_items = [] %}
        {% for item in list_1_items %}
          {% if item.summary not in list_2_items | map(attribute='summary') | list %}
            {% set new_items = new_items + [item.summary] %}
          {% endif %}
        {% endfor %}
        {{ new_items }}

  # Identify new items in List 2
  - variables:
      new_in_list_2: >
        {% set new_items = [] %}
        {% for item in list_2_items %}
          {% if item.summary not in list_1_items | map(attribute='summary') | list %}
            {% set new_items = new_items + [item.summary] %}
          {% endif %}
        {% endfor %}
        {{ new_items }}

  # Identify removed items from List 1
  - variables:
      removed_from_list_1: >
        {% set removed_items = [] %}
        {% for item in list_2_items %}
          {% if item.summary not in list_1_items | map(attribute='summary') | list %}
            {% set removed_items = removed_items + [item.summary] %}
          {% endif %}
        {% endfor %}
        {{ removed_items }}

  # Identify removed items from List 2
  - variables:
      removed_from_list_2: >
        {% set removed_items = [] %}
        {% for item in list_1_items %}
          {% if item.summary not in list_2_items | map(attribute='summary') | list %}
            {% set removed_items = removed_items + [item.summary] %}
          {% endif %}
        {% endfor %}
        {{ removed_items }}

  # Add new items to List 2
  - repeat:
      for_each: "{{ new_in_list_1 }}"
      sequence:
        - service: todo.add_item
          target:
            entity_id: "{{ list_2 }}"
          data:
            item: "{{ repeat.item }}"

  # Add new items to List 1
  - repeat:
      for_each: "{{ new_in_list_2 }}"
      sequence:
        - service: todo.add_item
          target:
            entity_id: "{{ list_1 }}"
          data:
            item: "{{ repeat.item }}"

  # Remove items from List 1 that were present in List 2 but are not in List 1 anymore
  - repeat:
      for_each: "{{ removed_from_list_2 }}"
      sequence:
        - service: todo.remove_item
          target:
            entity_id: "{{ list_1 }}"
          data:
            item: "{{ repeat.item }}"

  # Remove items from List 2 that were present in List 1 but are not in List 2 anymore
  - repeat:
      for_each: "{{ removed_from_list_1 }}"
      sequence:
        - service: todo.remove_item
          target:
            entity_id: "{{ list_2 }}"
          data:
            item: "{{ repeat.item }}"

mode: single